#!/usr/bin/perl -w

use v5.26.0;

our $VERSION = v1.7.1;

# Copyright (C) 2022-2025 American Mathematical Society
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# For more details see, https://github.com/AmerMathSoc/texml

# This code is experimental and is provided completely without warranty
# or without any promise of support.  However, it is under active
# development and we welcome any comments you may have on it.

# American Mathematical Society
# Technical Support
# Publications Technical Group
# 201 Charles Street
# Providence, RI 02904
# USA
# email: tech-support@ams.org

use warnings;

use open qw(:std :encoding(UTF-8));

use lib;

use FindBin;

BEGIN { lib->import("$FindBin::RealBin/../lib/perl") }

######################################################################
##                                                                  ##
##                         IMPORTED MODULES                         ##
##                                                                  ##
######################################################################

use Cwd;

use File::Copy;

use File::Temp qw(tempfile);

# use File::Basename qw(dirname);

use Getopt::Long qw(:config no_ignore_case);

use TeX::Interpreter::LaTeX;

use XML::Twig;

######################################################################
##                                                                  ##
##                            CONSTANTS                             ##
##                                                                  ##
######################################################################

my $PROGRAM_NAME;

BEGIN { ($PROGRAM_NAME = $0) =~ s{^.*/}{} };

my $DEFAULT_XML_INC_PATH = qq{$FindBin::RealBin/../lib/xml/docs};

# kpsewhich interprets an empty path element as <insert default paths here>

use constant DEFAULT_TEXINPUTS => '';

######################################################################
##                                                                  ##
##                          CONFIGURATION                           ##
##                                                                  ##
######################################################################

use TeXML::CFG;

my $CFG;

######################################################################
##                                                                  ##
##                             OPTIONS                              ##
##                                                                  ##
######################################################################

our %OPT = (debug        => 0,
            profiling    => 0,
            pretty_print => 1,
            utf8         => 1,
            do_svg       => 1,
            use_xetex    => 1,
            tl_year      => undef,
            job_name     => undef,
            cfg_file     => undef,
            list_cfg     => undef,
    );

######################################################################
##                                                                  ##
##                           SUBROUTINES                            ##
##                                                                  ##
######################################################################

sub usage {
    my $usage = << "EOF";
Usage: $PROGRAM_NAME [options] filename

Options:
    -help           Print this help text and quit.

    -debug

EOF

    print STDERR $usage;

    exit 0;
}

sub init_config {
    return if defined $CFG;

    $CFG = TeXML::CFG->get_cfg( { cfg_file => $OPT{cfg_file} } );

    return;
}

sub list_cfg {
    if (! defined $CFG) {
        print "No config file loaded\n";

        return;
    }

    my $cfg_file = $CFG->GetFileName();

    print "Contents of '$cfg_file':\n\n";

    $CFG->OutputConfigToFileHandle(*STDOUT, 0);

    exit 0;
}

sub use_xetex {
    my $tex_file = shift;

    open(my $fh, "<", $tex_file) or do {
        die "Can't find $tex_file: $!\n";
    };

    local $_;

    while (<$fh>) {
        next if m{^\s*$};

        return 1 if m{^%% AMS (ams|prd)xelatex};

        return if m{\\begin\{document\}};
    }

    close($fh);

    return;
}

sub xml_pp {
    my $xml_file = shift;

    my $t = XML::Twig->new(pretty_print   => 'indented',
                           error_context  => 1,
                           keep_spaces   => 1,
                           # keep_spaces_in => [ 'suffix' ],
                           discard_spaces_in => [ qw(p label title cite-group xref-group) ],
                           keep_encoding  => 1,
                           twig_handlers  => { _all_ => sub { $_[0]->flush } },
        );

    my ($fh, $tempfile) = tempfile() or do {
        die "cannot create tempfile for $xml_file: $!\n";
    };

    my $old_fh = select $fh;

    $t = $t->safe_parsefile($xml_file);

    select $old_fh;

    close $fh;

    if ($t) {
        my $mode = (stat($xml_file))[2];

        copy($tempfile, $xml_file) or do {
            die "cannot overwrite file $xml_file: $!";
        };

        if ($mode ne (stat($xml_file))[2]) {
            chmod $mode, $xml_file or do {
                die "cannot set $xml_file mode to $mode: $!";
            };
        }
    } else {
        if (defined $tempfile) {
            unlink $tempfile or die "cannot unlink temp file $tempfile: $!";
        }

        die "Could not pretty-print file\n";
    }

    return;
}

sub delete_aux_files {
    my $tex_file = shift;

    for my $ext (qw(aux toc lof)) {
        my $aux_file = $tex_file =~ s{(\.[a-z]+)?$}{.$ext}r;

        if (-e $aux_file) {
            unlink $aux_file or do {
                die "Can't delete $aux_file: $!\n";
            };
        }
    }

    return;
}

sub process_file {
    my $tex_file = shift;

    my $use_xetex = $OPT{use_xetex} || use_xetex($tex_file);

    my @texinputs = ($DEFAULT_XML_INC_PATH, DEFAULT_TEXINPUTS);

    if (my $pre = $CFG->val($PROGRAM_NAME, 'pre_texinputs')) {
        unshift @texinputs, $pre;
    }

    if (my $post = $CFG->val($PROGRAM_NAME, 'post_texinputs')) {
        push @texinputs, $post;
    }

    unshift @texinputs, ".//";

    $ENV{TEXINPUTS} = join ":", @texinputs;

    # my $dirname = dirname($tex_file);
    #
    # if ($dirname ne '.') {
    #     $ENV{TEXINPUTS} = ".:$dirname//:";
    # }

    my $TeX = TeX::Interpreter::LaTeX->new({ unicode_input => $OPT{utf8},
                                             do_svg    => $OPT{do_svg},
                                             use_xetex => $use_xetex,
                                             debug     => $OPT{debug},
                                             profiling => $OPT{profiling},
                                             job_name  => $OPT{job_name},
                                           });

    if (defined(my $tl_year = $OPT{tl_year})) {
        $CFG->setval("TeX::FMT::File", tlyear => 2000 + $tl_year);

        $TeX->set_fmt_file("laTeXML$tl_year.fmt");
    }

    $TeX->set_use_mathjax(1);

    delete_aux_files($tex_file);

    my $status = eval { $TeX->TeX($tex_file) };

    if ($@ || $status || ! defined $TeX->get_output_file_name()) {
        my $msg = $@ || $TeX->get_termination_message() || "it's a mystery";

        print STDERR "No XML was generated: $msg\n";

        ## This is insurance in case something kills us without
        ## setting a termination status.

        $status ||= 1;

        exit $status;
    }

    if ($OPT{pretty_print}) {
        my $xml_file = $TeX->get_output_file_name();

        print "\nPretty-printing $xml_file\n";

        xml_pp($xml_file);
    }

    return;
}

######################################################################
##                                                                  ##
##                               MAIN                               ##
##                                                                  ##
######################################################################

printf "This is %s version %vd.\n\n", $PROGRAM_NAME, $VERSION;

GetOptions("help"      => \&usage,
           "tl_year:i" => \$OPT{tl_year},
           "jobname:s" => \$OPT{job_name},
           "profile!"  => \$OPT{profiling},
           "debug!"    => \$OPT{debug},
           "svg!"      => \$OPT{do_svg},
           "xetex!"    => \$OPT{use_xetex},
           "pp!"       => \$OPT{pretty_print},
           "utf8!"     => \$OPT{utf8},
           "list_cfg!" => \$OPT{list_cfg},
           "cfg=s"     => \$OPT{cfg_file},
    );

init_config();

if ($OPT{list_cfg}) {
    list_cfg();
}

usage() unless @ARGV == 1;

my $extra_lib = $CFG->val($PROGRAM_NAME, 'extra_lib');

if (defined $extra_lib && $extra_lib =~ /\S/) {
    my @libs = split /:/, $extra_lib;

    lib->import($_) for @libs;
}

if (! defined $OPT{use_xetex}) {
    $OPT{use_xetex} = $CFG->val($PROGRAM_NAME, 'use_xetex', 1);
}

if ($OPT{debug}) {
    $ENV{TMPDIR} = getcwd();
}

my $tex_file = shift;

if (! -e $tex_file) {
    for my $ext (qw(tex ltx)) {
        if (-e "$tex_file.$ext") {
            $tex_file .= ".$ext";

            last;
        }
    }
}

die "Can't find $tex_file\n" unless -e $tex_file;

die "Can't read $tex_file\n" unless -r $tex_file;

process_file($tex_file);

__END__
