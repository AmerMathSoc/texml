#!/usr/bin/perl -w

# Copyright (C) 2022 American Mathematical Society
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# For more details see, https://github.com/AmerMathSoc/texml

# This code is experimental and is provided completely without warranty
# or without any promise of support.  However, it is under active
# development and we welcome any comments you may have on it.

# American Mathematical Society
# Technical Support
# Publications Technical Group
# 201 Charles Street
# Providence, RI 02904
# USA
# email: tech-support@ams.org

use strict;
use warnings;

use version; our $VERSION = qv '1.2.5';

binmode STDERR, ":utf8";
binmode STDOUT, ":utf8";

use lib;

use FindBin;

BEGIN { lib->import("$FindBin::RealBin/../lib/perl") }

######################################################################
##                                                                  ##
##                         IMPORTED MODULES                         ##
##                                                                  ##
######################################################################

use Cwd;

# use File::Basename qw(dirname);

use Getopt::Long qw(:config no_ignore_case);

use TeX::Interpreter::LaTeX;

######################################################################
##                                                                  ##
##                            CONSTANTS                             ##
##                                                                  ##
######################################################################

my $PROGRAM_NAME;

BEGIN { ($PROGRAM_NAME = $0) =~ s{^.*/}{} };

my $DEFAULT_XML_INC_PATH = qq{$FindBin::RealBin/../lib/xml/docs};

# kpsewhich interprets an empty path element as <insert default paths here>

use constant DEFAULT_TEXINPUTS => '';

######################################################################
##                                                                  ##
##                          CONFIGURATION                           ##
##                                                                  ##
######################################################################

use TeXML::CFG;

my $CFG;

######################################################################
##                                                                  ##
##                             OPTIONS                              ##
##                                                                  ##
######################################################################

our %OPT = (debug        => 0,
            profiling    => 0,
            pretty_print => 1,
            utf8         => 1,
            do_svg       => 1,
            use_xetex    => undef,
            job_name     => undef,
            cfg_file     => undef,
            list_cfg     => undef,
    );

######################################################################
##                                                                  ##
##                           SUBROUTINES                            ##
##                                                                  ##
######################################################################

sub usage() {
    my $usage = << "EOF";
Usage: $PROGRAM_NAME [options] filename

Options:
    -help           Print this help text and quit.

    -debug

EOF

    print STDERR $usage;

    exit 0;
}

sub init_config() {
    return if defined $CFG;

    $CFG = TeXML::CFG->get_cfg( { cfg_file => $OPT{cfg_file} } );

    return;
}

sub list_cfg() {
    if (! defined $CFG) {
        print STDERR "No config file loaded\n";
    }

    my $cfg_file = $CFG->GetFileName();

    print STDERR "Contents of '$cfg_file':\n\n";

    $CFG->OutputConfigToFileHandle(*STDOUT, 0);

    exit 0;
}

sub use_xetex( $ ) {
    my $tex_file = shift;

    open(my $fh, "<", $tex_file) or do {
        die "Can't find $tex_file: $!\n";
    };

    local $_;

    while (<$fh>) {
        next if m{^\s*$};

        return 1 if m{^%% AMS (ams|prd)xelatex};

        return if m{\\begin\{document\}};
    }

    close($fh);

    return;
}

sub process_file( $ ) {
    my $tex_file = shift;

    my $use_xetex = $OPT{use_xetex} || use_xetex($tex_file);

    my @texinputs = ($DEFAULT_XML_INC_PATH, DEFAULT_TEXINPUTS);

    if (my $pre = $CFG->val($PROGRAM_NAME, 'pre_texinputs')) {
        unshift @texinputs, $pre;
    }

    if (my $post = $CFG->val($PROGRAM_NAME, 'post_texinputs')) {
        push @texinputs, $post;
    }

    unshift @texinputs, ".//";

    $ENV{TEXINPUTS} = join ":", @texinputs;

    # my $dirname = dirname($tex_file);
    #
    # if ($dirname ne '.') {
    #     $ENV{TEXINPUTS} = ".:$dirname//:";
    # }

    my $convert = TeX::Interpreter::LaTeX->new({ fmt => 'latex',
                                                 unicode_input => $OPT{utf8},
                                                 do_svg    => $OPT{do_svg},
                                                 use_xetex => $use_xetex,
                                                 debugging => $OPT{debug},
                                                 profiling => $OPT{profiling},
                                                 job_name  => $OPT{job_name},
 });

    $convert->set_use_mathjax(1);

    eval { $convert->TeX($tex_file) };

    if ($@) {
        print STDERR "$@\n";
    }

    if ($OPT{pretty_print}) {
        my $xml_file = $convert->get_output_file_name();

        # Preserve spaces inside the name/suffix element so
        # <suffix><x>, </x>Jr.</suffix> doesn't get turned into
        #
        #     <suffix>
        #         <x>, </x>Jr.</suffix>
        #
        # Surprisingly, this is the only place this problem has popped
        # up so far.

        system q{/usr/bin/xml_pp}, '-i', -p => 'suffix', $xml_file;
    }

    return;
}

######################################################################
##                                                                  ##
##                               MAIN                               ##
##                                                                  ##
######################################################################

print "This is $PROGRAM_NAME version $VERSION.\n\n";

GetOptions("help"      => \&usage,
           "jobname:s" => \$OPT{job_name},
           "profile!"  => \$OPT{profiling},
           "debug!"    => \$OPT{debug},
           "svg!"      => \$OPT{do_svg},
           "xetex!"    => \$OPT{use_xetex},
           "pp!"       => \$OPT{pretty_print},
           "utf8!"     => \$OPT{utf8},
           "list_cfg!" => \$OPT{list_cfg},
           "cfg=s"     => \$OPT{cfg_file},
    );

init_config();

if ($OPT{list_cfg}) {
    list_cfg();
}

usage() unless @ARGV;

my $extra_lib = $CFG->val($PROGRAM_NAME, 'extra_lib');

if (defined $extra_lib && $extra_lib =~ /\S/) {
    my @libs = split /:/, $extra_lib;

    lib->import($_) for @libs;
}

if (! defined $OPT{use_xetex}) {
    $OPT{use_xetex} = $CFG->val($PROGRAM_NAME, 'use_xetex', 1);
}

if ($OPT{debug}) {
    $ENV{TMPDIR} = getcwd();
}

while (my $tex_file = shift @ARGV) {
    do { warn "Can't find $tex_file\n"; next; } unless -e $tex_file;

    do { warn "Can't read $tex_file\n"; next; } unless -r $tex_file;

    process_file($tex_file);

    print "\n" if @ARGV;
}

__END__
