#!/usr/bin/perl -w

use strict;
use warnings;

use lib qw(/ams/texmf/texml/lib/perl);

use TeX::FMT::File;

binmode STDOUT, ":utf8";
binmode STDERR, ":utf8";

my $file = shift || 'plain.fmt';

my $fmt = TeX::FMT::File->new({ file_name => $file });

$fmt->open('r');

$fmt->load();

# $fmt->debug();

print "engine: ", $fmt->get_engine(), "\n";
print "active_base: ", $fmt->active_base(), "\n";
print "undefined_control_sequence: ", $fmt->undefined_control_sequence(), "\n";
print "null: ", $fmt->null(), "\n";

print "\n";

print "del_code_base = ", $fmt->del_code_base, "\n";

print "\n";

#exit;

my $eqtb   = $fmt->get_eqtb();
my $hash   = $fmt->get_hash();

for my $ptr ($fmt->active_base()..$fmt->undefined_control_sequence()) {
    my $word = $eqtb->get_word($ptr);

    next if $word->get_type() == $fmt->undefined_cs;

    my $name;

    if ($ptr < $fmt->single_base) {
        $name = chr($ptr - 1);
    } elsif ($ptr < $fmt->null_cs()) {
        $name = "\\" . chr($ptr - $fmt->single_base);
    } else {
        my $string_no = $hash->get_text($ptr);

        if (defined $string_no) {
            $name = $fmt->get_string($string_no);
        } else {
            $name = '<undef>';
        }
    }

    print $ptr, ": ", $name, ": ";
    $fmt->show_eqtb_entry($ptr);
}

__END__
