#!/usr/bin/perl -w

use v5.26.0;

use lib qw(/ams/texmf/texml/lib/perl);

use warnings;

use TeX::FMT::Parameters;

sub p {
    my $p = shift;
    my $n = shift;

    print "$n = ", $p->get_parameter($n), "\n";
}

my $p = get_engine_parameters('pdftex', 2024);

p($p, 'pdftex_first_extension_code');
p($p, 'pdf_literal_node');
p($p, 'pdf_lateliteral_node');
p($p, 'pdf_obj_code');

p($p, 'pdf_fake_space_node');
p($p, 'pdf_running_link_off_node');
p($p, 'pdf_running_link_on_node');
p($p, 'pdf_space_font_code');
p($p, 'pdftex_last_extension_code');

__END__

#!/usr/bin/perl -w

use strict;
use warnings;

use version; our $VERSION = qv '0.0.0';

sub trim {
    my $s = shift;

    $s =~ s{^ +}{}g;
    $s =~ s{ +$}{}g;
    $s =~ s{  +}{ }g;

    return $s;
}

while (<>) {
    chomp;

    s{^\# \s* define\b}{}smx and do {
        s{/\*.*?\*/}{}g;

        my ($param, $expr) = split / /, trim($_);

        next if $param =~ m{[()]};

#        print "*** '$param' => '$expr'\n";

        my @tokens = split /([()+-])/, $expr;

        print "*** '$expr' => @tokens\n" if @tokens > 1;

        next;
    };
}

__END__

#!/usr/bin/perl -w

use strict;
use warnings;

use version; our $VERSION = qv '0.0.0';

my $MAX_CS   = 0;
my $MAX_CODE = 0;

my @PRIMITIVES;

while (<>) {
    chomp;

    m{__DATA__} and do {

        while (<>) {
            chomp;

            last if m{__END__};

            next unless length;

            my ($csname, $cmd_code_name, $equiv) = split /\s+/, $_, 3;

            if (length($csname) > $MAX_CS) {
                $MAX_CS = length($csname);
            }

            if (length($csname) > $MAX_CODE) {
                $MAX_CODE = length($csname);
            }

            push @PRIMITIVES, [ $csname, $cmd_code_name, $equiv ];
        }
    };
}

for my $prim (sort { $a->[1] cmp $b->[1] } @PRIMITIVES) {
    print sprintf qq{%-${MAX_CS}s %-${MAX_CODE}s %s\n}, @{ $prim };
}

__END__
