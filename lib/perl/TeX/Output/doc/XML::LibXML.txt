XML::LibXML

XML::LibXML::Parser         : Parsing XML files with XML::LibXML

XML::LibXML::DOM            : Document Object Model (DOM) Implementation

XML::LibXML::SAX            : XML::LibXML direct SAX parser
XML::LibXML::SAX::Builder
XML::LibXML::SAX::Generator
XML::LibXML::SAX::AttributeNode
XML::LibXML::SAX::Parser    : Derives from XML::SAX::Base

XML::LibXML::Reader         : Reading XML with a pull-parser

XML::LibXML::RelaxNG        : frontend for RelaxNG schema validation

XML::LibXML::Schema         : frontend for W3C Schema schema validation

XML::LibXML::XPathContext   : Evaluating XPath expressions with
                              enhanced support for the evaluation context

XML::LibXML::InputCallback  : custom URI Resolver and input callbacks

XML::LibXML::Common         : Common functions for XML::LibXML classes

XML::LibXML::Pattern
XML::LibXML::RegExp
XML::LibXML::XPathExpression
XML::LibXML::InputCallback

XML::LibXML::AttributeHash

XML::LibXML::Number
XML::LibXML::Boolean
XML::LibXML::Literal

XML::LibXML::NodeList

XML::LibXML::Devel          : makes functions from LibXML.xs available

XML::LibXML::ErrNo
XML::LibXML::Error

===========================================================================
The nodes in the Document Object Model (DOM) are represented by the
following classes (most of which "inherit" from XML::LibXML::Node):

XML::LibXML::Node                   : DOM Nodes (abstract base class)
    XML::LibXML::Document           : document nodes
    XML::LibXML::DocumentFragment   : Document Fragment implementation (L2)
    XML::LibXML::Element            : element nodes
    XML::LibXML::Text               : text nodes
        XML::LibXML::Comment        : comment nodes
        XML::LibXML::CDATASection   : CDATA sections
    XML::LibXML::Attr               : attribute class
    XML::LibXML::Dtd                : frontend for DTD validation (*under construction*)
    XML::LibXML::PI                 : processing instruction nodes

XML::LibXML::Namespace          : namespace nodes
XML::LibXML::NamedNodeMap

===========================================================================

XML::LibXML::Node

    $type = $node->nodeType;

    $name = $node->nodeName;
    $node->setNodeName( $newName );

    $localname = $node->localname;
    $nameprefix = $node->prefix;
    $uri = $node->namespaceURI();


    $bool = $node->isSameNode( $other_node );
    $bool = $node->isEqual( $other_node );

    $num = $node->unique_key;

    $content = $node->nodeValue;
    $content = $node->textContent;

    $node->unbindNode();

    $childnode = $node->removeChild( $childnode );
    $oldnode = $node->replaceChild( $newNode, $oldNode );
    $node->replaceNode($newNode);

    $childnode = $node->appendChild( $childnode );
    $childnode = $node->addChild( $childnode );
    $node = $parent->addNewChild( $nsURI, $name );
    $node->addSibling($newNode);

    $newnode = $node->cloneNode( $deep );

    $parentnode = $node->parentNode;

    $nextnode = $node->nextSibling();
    $nextnode = $node->nextNonBlankSibling();
    $prevnode = $node->previousSibling();
    $prevnode = $node->previousNonBlankSibling();

    $boolean = $node->hasChildNodes();

    $childnode = $node->firstChild;
    $childnode = $node->lastChild;

    $documentnode = $node->ownerDocument;

    $node = $node->getOwner;

    $node->setOwnerDocument( $doc );

    $node->insertBefore( $newNode, $refNode );
    $node->insertAfter( $newNode, $refNode );

    @nodes = $node->findnodes( $xpath_expression );
    $result = $node->find( $xpath );
    print $node->findvalue( $xpath );
    $bool = $node->exists( $xpath_expression );

    @childnodes = $node->childNodes();
    @childnodes = $node->nonBlankChildNodes();

    $xmlstring = $node->toString($format,$docencoding);

    $c14nstring = $node->toStringC14N();
    $c14nstring = $node->toStringC14N($with_comments, $xpath_expression , $xpath_context);
    $c14nstring = $node->toStringC14N_v1_1();
    $c14nstring = $node->toStringC14N_v1_1($with_comments, $xpath_expression , $xpath_context);

    $ec14nstring = $node->toStringEC14N();
    $ec14nstring = $node->toStringEC14N($with_comments, $xpath_expression, $inclusive_prefix_list);
    $ec14nstring = $node->toStringEC14N($with_comments, $xpath_expression, $xpath_context, $inclusive_prefix_list);

    $str = $doc->serialize($format);

    $boolean = $node->hasAttributes();
    @attributelist = $node->attributes();
    $URI = $node->lookupNamespaceURI( $prefix );
    $prefix = $node->lookupNamespacePrefix( $URI );
    @nslist = $node->getNamespaces;
    $node->removeChildNodes();
    $strURI = $node->baseURI();
    $node->setBaseURI($strURI);
    $node->nodePath();
    $lineno = $node->line_number();

    $node->normalize;

---------------------------------------------------------------------------
XML::LibXML::Document           < XML::LibXML::Node

    $dom = XML::LibXML::Document->new( $version, $encoding );
    $dom = XML::LibXML::Document->createDocument( $version, $encoding );
    $strURI = $doc->URI();
    $doc->setURI($strURI);
    $strEncoding = $doc->encoding();
    $strEncoding = $doc->actualEncoding();
    $doc->setEncoding($new_encoding);
    $strVersion = $doc->version();
    $doc->standalone
    $doc->setStandalone($numvalue);
    my $compression = $doc->compression;
    $doc->setCompression($ziplevel);
    $docstring = $dom->toString($format);
    $c14nstr = $doc->toStringC14N($comment_flag, $xpath [, $xpath_context ]);
    $ec14nstr = $doc->toStringEC14N($comment_flag, $xpath [, $xpath_context ], $inclusive_prefix_list);
    $str = $doc->serialize($format);
    $state = $doc->toFile($filename, $format);
    $state = $doc->toFH($fh, $format);
    $str = $document->toStringHTML();
    $str = $document->serialize_html();
    $bool = $dom->is_valid();
    $dom->validate();
    $root = $dom->documentElement();
    $dom->setDocumentElement( $root );
    $element = $dom->createElement( $nodename );
    $element = $dom->createElementNS( $namespaceURI, $nodename );
    $text = $dom->createTextNode( $content_text );
    $comment = $dom->createComment( $comment_text );
    $attrnode = $doc->createAttribute($name [,$value]);
    $attrnode = $doc->createAttributeNS( namespaceURI, $name [,$value] );
    $fragment = $doc->createDocumentFragment();
    $cdata = $dom->createCDATASection( $cdata_content );
    my $pi = $doc->createProcessingInstruction( $target, $data );
    my $entref = $doc->createEntityReference($refname);
    $dtd = $document->createInternalSubset( $rootnode, $public, $system);
    $dtd = $document->createExternalSubset( $rootnode_name, $publicId, $systemId);
    $document->importNode( $node );
    $document->adoptNode( $node );
    my $dtd = $doc->externalSubset;
    my $dtd = $doc->internalSubset;
    $doc->setExternalSubset($dtd);
    $doc->setInternalSubset($dtd);
    my $dtd = $doc->removeExternalSubset();
    my $dtd = $doc->removeInternalSubset();
    my @nodelist = $doc->getElementsByTagName($tagname);
    my @nodelist = $doc->getElementsByTagNameNS($nsURI,$tagname);
    my @nodelist = $doc->getElementsByLocalName($localname);
    my $node = $doc->getElementById($id);

    $dom->indexElements();

---------------------------------------------------------------------------
XML::LibXML::DocumentFragment   < XML::LibXML::Node

---------------------------------------------------------------------------
XML::LibXML::Element            < XML::LibXML::Node

    $node = XML::LibXML::Element->new( $name );

    $node->setAttribute( $aname, $avalue );
    $node->setAttributeNS( $nsURI, $aname, $avalue );

    $avalue = $node->getAttribute( $aname );
    $avalue = $node->getAttributeNS( $nsURI, $aname );

    $attrnode = $node->getAttributeNode( $aname );
    $attrnode = $node->getAttributeNodeNS( $namespaceURI, $aname );

    $node->removeAttribute( $aname );
    $node->removeAttributeNS( $nsURI, $aname );

    $boolean = $node->hasAttribute( $aname );
    $boolean = $node->hasAttributeNS( $nsURI, $aname );

    @nodes = $node->getChildrenByTagName($tagname);
    @nodes = $node->getChildrenByTagNameNS($nsURI,$tagname);

    @nodes = $node->getChildrenByLocalName($localname);

    @nodes = $node->getElementsByTagName($tagname);
    @nodes = $node->getElementsByTagNameNS($nsURI,$localname);

    @nodes = $node->getElementsByLocalName($localname);

    $node->appendWellBalancedChunk( $chunk );

    $node->appendText( $PCDATA );
    $node->appendTextNode( $PCDATA );
    $node->appendTextChild( $childname , $PCDATA );

    $node->setNamespace( $nsURI , $nsPrefix, $activate );
    $node->setNamespaceDeclURI( $nsPrefix, $newURI );
    $node->setNamespaceDeclPrefix( $oldPrefix, $newPrefix );

---------------------------------------------------------------------------
XML::LibXML::Text               < XML::LibXML::Node

    $text = XML::LibXML::Text->new( $content );
    $nodedata = $text->data;
    $text->setData( $text_content );
    $text->substringData($offset, $length);
    $text->appendData( $somedata );
    $text->insertData($offset, $string);
    $text->deleteData($offset, $length);
    $text->deleteDataString($remstring, $all);
    $text->replaceData($offset, $length, $string);
    $text->replaceDataString($old, $new, $flag);
    $text->replaceDataRegEx( $search_cond, $replace_cond, $reflags );

---------------------------------------------------------------------------
XML::LibXML::Comment            < XML::LibXML::Node < XML::LibXML::Text

    $node = XML::LibXML::Comment->new( $content );

---------------------------------------------------------------------------
XML::LibXML::CDATASection       < XML::LibXML::Node < XML::LibXML::Text

    $node = XML::LibXML::CDATASection->new( $content );

---------------------------------------------------------------------------
XML::LibXML::Attr               < XML::LibXML::Node

    $attr = XML::LibXML::Attr->new($name [,$value]);

    $string = $attr->getValue();
    $string = $attr->value;

    $attr->setValue( $string );

    $node = $attr->getOwnerElement();

    $attr->setNamespace($nsURI, $prefix);

    $bool = $attr->isId;

    $string = $attr->serializeContent;

---------------------------------------------------------------------------
XML::LibXML::Dtd                < XML::LibXML::Node

    $dtd = XML::LibXML::Dtd->new($public_id, $system_id);
    $dtd = XML::LibXML::Dtd->parse_string($dtd_str);

    $publicId = $dtd->getName();
    $publicId = $dtd->publicId();
    $systemId = $dtd->systemId();

---------------------------------------------------------------------------
XML::LibXML::PI                 < XML::LibXML::Node

    $pinode->setData( $data_string );
    $pinode->setData( name=>string_value [...] );
